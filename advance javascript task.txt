***REST OPERATORS******
jb hum function ko call krty wakt bht sara data pass krty hai wo function chalty wakt 
parametors mai ya data utha ta hai or hum (...others) kr k baki sara data others mai ajata ha.
const function (a,b,c , ...others){

}


fucntion(1,2,3,4,5,6,6,7)

***********SPREAD OPERATORS********
jb hum function call krty ha us wakt agr humy us ko array pass krna ha or wo array mai bht data hai to hum (...array)
kry gy to sara data us function mai chala jaye ga

array = [1,3,4,5,6,7,8,9,6]
function(...array)

*********CALL BACK*******
call back hum log is liye use krty hai q k jb humy 2 function ek sat chalany hongy settiome out mai
to get data ka function 1 mint mai chaly ga or create data a 3 seconds k bd to jb hum 3rd data create kary gy to wo get nhe ohga.
q k get data 1 second mai chal raha jis sy page reload refresh hojata ha or 3sra data create nhe hota.

******NEW PROMISES****** 
YA 2 paramators pass krta ha reject resolve jb b koi masla nhe hota to resolve chalta hai or jb b
koi masla ata ha to reject section chalta ha .
createfuction ().then(getdata).catch(err=>console.log(err))

*****ASYNC AWAIT**** 
main function ko async lagai gy or jis function ka wait krna ha us ko await lagai gy.

async function start(){
await createdata()
getdata()
}


*******CLOSURES********

var sum = function(a){
    console.log(a)
    // var b=4
    
  return function(b){
   console.log(b)

   return function(c){
    console.log(c)
    return a+b+c
   
    }
    }   
    }

    // sum(4)
    const store= sum(4)(5)(6)
    console.log(store)
    const store1= store(5)
    const store2 = store1(6)
    console.log(store2)

closure function k andr function bana k return krna closures hota hai or main function k variber ko
inner function b access kr sakta ha is ko lexcical scope kehty hai.
is function ko hum har bar ek value mai function ko store kar k value pass krty hai.
is mai value retain reti hai lost nhe hoti.




var sum = function(a,b,c){
    
console.log(a,b,c)
return {


    getsumtwo:function(){
    return a+b
    },
    
    getsumthree:function(){
    return a+b+c
    }
}
    
   }
    // sum(2,3,4)
 const store= sum(2,3,4)
// console.log(store)
console.log(store.getsumtwo())
console.log(store.getsumthree())
closures mai inner function ko access krny k liye zaroori hai k ap outerfunction ko ek varible mai store karo
const store =sum(2,3,4)

********CALL********* 
jb b hum 2 obj banaty hai or hum chaty hai k dosry obj ka data b humary pas ajaye to
hum obj k and fuc banaty hai or us ka this utha ty hai.
to dono obj ka data ajata hai

dataobj.prindetail.call(dataobj1)
dataobj k andr print detail ka function hai or us k andr console liya ha this sy sara data ajata.

hum printdetail ka function global b bana sakty ha

let printdetail = function(state){
console.log(this.name+state)
}
printdetail.call(userdata2,"ahmed","safdar")

*****APPLY*******
call or apply mai difference ya ha k call mai data parameter mai pass krty hai or apply mai
array mai pass hota ha.
printdetail.apply(userdata2,["ahmed","safdar"])

****BIND***
bind function same call ki tara kaam krta hai lekin is mai ek vairble mai store krna parhta ha like
let newfunc = printdetail.bind(userdetail,"ahmed","safdar")


*********PROTOTYPE********

const obj = {
name:"safdar",
}
console.log(obj)

const obj2 = {
roll:21,
__proto__:obj
}

console.log(obj2)

**HOISTING*******
hoisting ka taluq memory sy hai jesy kuch cheez hum declare krty hai uper or 
us ko neachy access kary gy 
to us ko hoisting kethty ha.

***EVENT BUBBLING**********
from child to parent propogation
var div=document.querySelector("div")
var button=document.querySelector("button")


div.addEventListener("click",()=>{
    console.log("div")
})

button.addEventListener("click",()=>{
    console.log("button")
})

*******CAPTURING*******
var div=document.querySelector("div")
var button=document.querySelector("button")


div.addEventListener("click",(event)=>{
    event.stopPropagation()

    console.log("div")
},true)

button.addEventListener("click",()=>{
    console.log("button")
},true)


**CURRING******
ya i ek naya tareeka hai function bana k value pass krny ka 
// function Adding(a,b,c){
//     console.log(a,b,c)
//    return a+b+c

// }

// const sum= Adding(1,3,5)
// console.log(sum)

function Addings(a){
  
   return function(b){
    return function (c){
        console.log(a,b,c)
   return a+b+c

    }
   }

}

const aum= Addings(2)(3)(4)
console.log(aum)



}

******Infinite CURRYING********

is mai hum ya dekhty hai k b ki value a rahi hai k nhe jb tk ayegi to hum a mai 
add krty rahy gy jb values khatam 
hojaye to phr hum a return kr daingy jo k final result hoga

function Infinit (a){
    return function (b){
        if(b) return Infinit (a+b);
        return a
        
    }
}
 console.log(Infinit(3)(4)(5)(5)())

**********MEMOIZATION**********
is ka concept ya hai k hum kam time mai zyada kaam kary or kam time waste kary .
jesy hum ek api ko first time call kr k redux mai save karany k bd dubara jb b api ko hit kary gy to 
server pai request nhe jaye gi redux pai jayegi second time.
jesy hum ek bar data get kr k catche mai save kr lay us k bd har bar request catche mai jayega.

let sum = 0
const Calc = (n) => {
    for (let i = 0; i <= n; i++) {
        sum = sum + i;
    }
    return sum
}


const Memorize = (fun) => {
    let catche = {}
    return function (...arg) {
        let n = arg[0]
        console.log("catche",n)

        if (n in catche) {
            console.log("catche")
            return catche[n]
        }
        else{
            let result= fun(n)
            console.log("first time",result)
            catche[n]=result
            return result
        }
    }

}
console.time()
const store = Memorize(Calc)
console.log(store(5))
console.timeEnd()


console.time()
console.log(store(5))
console.timeEnd()


*******DEBOUNCING*******
unwanted functions jis ki waja sy app slow ho jati ha is ko rokny k liye hum debouncing or throttling ko use krty hai.
jb b hum ek specific time interval or tb user koi request na bej raha ho tab call ho. 


let counter = 0;
function Getdata(){
    console.log("check"  ,counter++)
}


function BetterFun(call,d){
    let timer;
    return function(...arg){
        if (timer) clearTimeout(timer)
        setTimeout(() => {
            call()
        }, d);

    }

}

const store = BetterFun(Getdata,1000)



******THROTTLING ********
is ka example hum aisy laity hai k humary pas ek button hai jis pai click krny pai function chalta hai
hum chaty hai k is pai click ek br ho or phr kuxh time k liye button disable hojaye taky dobara 
click na ho.
const mythroling=(fun,d)=>{
    return function(...args){
        document.getElementById("myid").disabled=true
        setTimeout(() => {
            fun()
        }, d);

    }

}


const store1 = mythroling(()=>{
    document.getElementById("myid").disabled=false

console.log("clicked")
},5000)
